#!/bin/bash

# SysNet/Sonda installation script
# Created by @yonasuriv
# Modified for use as a MAKEFILE with install and uninstall options

# Source color definitions
source lib/includes/colors

# Define variables
INSTALL_DIR="$HOME/.local/share/sonda"        # Local directory for the installation
REPO_URL="https://github.com/yonasuriv/sonda" # GitHub repository URL
USR_SHARE="/usr/share"                        # System-wide shared directory
USR_BIN="/usr/bin"                            # System-wide bin directory
BIN_NAME="sonda"                              # Name of the executable binary
LOCAL_BIN_NAME="init"                         # Local binary name inside the repo
DESKTOP_FILE="static/shortcuts/sonda.desktop" # Path to the .desktop file inside the repo
ICON_FILE="static/icons/sonda.png"            # Path to the icon inside the repo

# Function to handle failure and exit
fail() {
    echo -e "${RED}[E]${RT} Process failed."
    exit 1
}

# Ensure the script is run with sudo/root permissions
if sudo -n true 2>/dev/null; then
    :
else
    echo -ne "${LB}${RED}[E]${RT} This script must be run as root. Please enter your password: "
    sudo -v || { echo -e "${RED}[E]${RT} Operation cancelled."; exit 1; }
fi

install_prompt() {
    local action=$1  # Expect 'install' or 'uninstall' as an argument
    
    # Define proper nouns based on action
    if [[ "$action" == "install" ]]; then
        action_msg="install"
        initializing_msg="Initializing installation..."
    elif [[ "$action" == "uninstall" ]]; then
        action_msg="uninstall"
        initializing_msg="Initializing uninstallation..."
    else
        echo -e "${RED}[E] Invalid action. Only 'install' or 'uninstall' are allowed.${RT}"
        exit 1
    fi

    # Display prompt
    echo -e "${LB}${W} You are about to ${NKYELLOW}${action_msg}${RT} ${NKYELLOW}sonda${RT}"
    
    # Prompt for user confirmation
    read -p "   Continue? [Y/n]: " answer
    echo -e "\033[A\033[K\033[A\033[K" # Move up 2 spaces and delete them (removes the prompt)

    # Default to "yes" if the input is empty
    if [[ -z "$answer" ]]; then
        answer="y"
    fi

    # Check the user's response
    if [[ "$answer" == [yY] ]]; then
        echo -e "${L} ${initializing_msg}${RT}"
        sleep 1
    else
        echo -e "${E} ${action_msg^} cancelled."  # Capitalize first letter of the action (Install/Uninstall)
        exit
    fi
}


# Function to handle installation
install_sonda() {
    echo -e "${LB}  +  Starting installation process...${RT}"

    # Install additional dependencies quietly
    # echo -e "${LB}  +  Installing dependencies...${RT}"
    sudo apt install -y lolcat inxi > /dev/null 2>&1 || fail

    echo -e "  | " 

    # Create the installation directory in the user's local share if it doesn't exist
    echo -e "  +  Creating installation directory...${RT}"
    mkdir -p "$INSTALL_DIR" || fail

    echo -e "  | "

    # Copy the current working directory's content to the installation directory
    echo -e "  +  Copying files to installation directory...${RT}"
    sudo cp -r "$PWD/." "$INSTALL_DIR" || fail

    echo -e "  | "

    # Set proper permissions for the install directory (read/write/execute only for the user)
    echo -e "  +  Setting permissions...${RT}"
    chmod 700 "$INSTALL_DIR" || fail

    echo -e "  | "

    # Create a symbolic link to the installation directory in /usr/share (system-wide)
    echo -e "  +  Creating symbolic link in /usr/share...${RT}"
    if [[ "$INSTALL_DIR" == "$USR_SHARE/sonda" ]]; then
        echo -e "${RED}[E]${RT} Cannot create a symlink to the same directory, as this would cause recursion."
        fail
    else
        sudo ln -sf "$INSTALL_DIR" "$USR_SHARE/sonda" || fail
        find "$INSTALL_DIR" -maxdepth 1 -type l -exec rm -f {} \;
    fi

    echo -e "  | "

    # Ensure the binary exists before creating a symlink
    echo -e "  +  Linking binary...${RT}"
    if [ -f "$INSTALL_DIR/bin/$LOCAL_BIN_NAME" ]; then
        sudo ln -sf "$INSTALL_DIR/bin/$LOCAL_BIN_NAME" "$USR_BIN/$BIN_NAME" || fail
        sudo chmod +x "$USR_BIN/$BIN_NAME" || fail
    else
        echo -e "${RED}[E]${RT} Binary file not found: $INSTALL_DIR/bin/$LOCAL_BIN_NAME"
        fail
    fi

    echo -e "  | "

    # Install the .desktop file to make the application available in system menus
    echo -e "  +  Installing .desktop file...${RT}"
    if [ -f "$INSTALL_DIR/$DESKTOP_FILE" ]; then
        sudo mkdir -p "/usr/share/applications"  # Ensure the target directory exists
        sudo cp -f "$INSTALL_DIR/$DESKTOP_FILE" "/usr/share/applications" || fail
    else
        echo -e "${RED}[E]${RT} .desktop file not found: $INSTALL_DIR/$DESKTOP_FILE"
        fail
    fi

    echo -e "  | "

    # Ensure the icon file has the correct permissions if it exists
    echo -e "  +  Setting icon file permissions...${RT}"
    if [ -f "$INSTALL_DIR/$ICON_FILE" ]; then
        sudo chmod 644 "$INSTALL_DIR/$ICON_FILE" || fail
    else
        echo -e "${RED}[E]${RT} Icon file not found: $INSTALL_DIR/$ICON_FILE"
        fail
    fi

    echo -e "  | "

    echo -e "  +  Setting up the Shell...${RT}"
    # echo -e "  | "

    # Get the current username
    current_user=$(whoami)

    # Define the line to be checked and added
    sudoers_entry="$current_user ALL=(ALL) NOPASSWD: /usr/bin/apt update"

    # Check if the line already exists in the sudoers file
    if sudo grep -q "$sudoers_entry" /etc/sudoers; then
        : # echo -e "  |  The sudoers entry for $current_user already exists."
    else
        echo -e "  |  Adding sudoers entry for $current_user..."
        
        # Safely add the entry using visudo
        echo "$sudoers_entry" | sudo EDITOR='tee -a' visudo

        if [ $? -eq 0 ]; then
            echo -e "  |  Sudoers entry added successfully."
        else
            echo -e "  |  Failed to add sudoers entry."
        fi
    fi

    # echo -e "  | "

    # Get the current shell
    current_shell=$(basename "$SHELL")

    # Determine the appropriate startup file based on the shell
    if [ "$current_shell" = "bash" ]; then
        shell_rc_file="$HOME/.bashrc"
    elif [ "$current_shell" = "zsh" ]; then
        shell_rc_file="$HOME/.zshrc"
    else
        echo "Unsupported shell: $current_shell"
        exit 1
    fi

    # Check if 'sonda -x' is already present in the shell's rc file
    if grep -q "sonda -x" "$shell_rc_file"; then
        : # echo -e "  |  'sonda -x' is already in $shell_rc_file"
    else
        echo -e "  |  Adding 'sonda -x' to $shell_rc_file..."
        echo "sonda -x" >> "$shell_rc_file"

        if [ $? -eq 0 ]; then
            echo -e "  |  Sonda added to $shell_rc_file successfully."
        else
            echo -e "  |  Failed to add 'sonda -x' to $shell_rc_file."
            exit 1
        fi
    fi

    # Display installation success message only if all steps completed successfully
    echo -e "${LB}${NKBRGREEN}  ✔  Installation success.${RT}"

    # Determine the appropriate startup file based on the shell
    if [ "$current_shell" = "bash" ]; then
        bash
    elif [ "$current_shell" = "zsh" ]; then
        zsh
    else
        echo -e "${E} Unsupported shell: $current_shell"
        exit 1
    fi
}

# Function to handle uninstallation
uninstall_sonda() {
    install_prompt "uninstall"

    echo -e "  +  Starting uninstallation process...${RT}"

    echo -e "  | "

    # Remove the symbolic link from /usr/bin
    echo -e "  +  Removing binary symlink...${RT}"
    sudo rm -f "$USR_BIN/$BIN_NAME" || fail

    echo -e "  | "

    # Remove the .desktop file
    echo -e "  +  Removing .desktop file...${RT}"
    sudo rm -f "/usr/share/applications/sonda.desktop" || fail

    echo -e "  | "

    # Remove the icon file
    echo -e "  +  Removing icon file...${RT}"
    sudo rm -f "$INSTALL_DIR/$ICON_FILE" || fail

    echo -e "  | "

    # Remove the symbolic link from /usr/share
    echo -e "  +  Removing symbolic link from /usr/share...${RT}"
    sudo rm -f "$USR_SHARE/sonda" || fail

    echo -e "  | "

    # Remove the installation directory
    echo -e "  +  Removing installation directory...${RT}"
    sudo rm -rf "$INSTALL_DIR" || fail

    echo -e "${GREEN}  ✔  Uninstallation success.${RT}"
}

# Main logic to parse the arguments
case "$1" in
    --install|-i)
        install_sonda
        ;;
    --uninstall|-u)
        uninstall_sonda
        ;;
    *)
        echo -e "${LB}${RB}${RED}[E]${RT} Invalid argument. Use -i|--install or -u|--uninstall.${RT}"
        exit 1
        ;;
esac
