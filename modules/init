#!/bin/bash

# Parse arguments before checking the value of LOCAL
# while [ $# -gt 0 ]; do
#   case "$1" in
#       --local)
#           LOCAL="YES"
#           shift 1 # Only shift 1 argument here since --local has no extra argument
#           continue
#           ;;
#   esac
# done

# Now check the value of LOCAL
if [[ "$LOCAL" == "YES" ]]; then
    INSTALLDIR="$(pwd)"
else
    INSTALLDIR="/usr/share/sysdd"
fi

savelog() {
    # Define a log file to store the output
    LOGFILE="$HOME/Desktop/system_info_$(date +%d%m%y).log"

    # Clear log file if it already exists
    > $LOGFILE

    # Append detailed information about the log created
    echo "[i] File created on $(date '+%A, %B %d, %Y at %H:%M:%S %Z')" | cat - "$LOGFILE" > temp_file && mv temp_file "$LOGFILE"
}

# Variable to store the output modifier if --save is provided
SOUT=""
PRETTYP=""

# Function to print in yellow for sudo commands skipped
function print_sudo_skipped {
    echo -e "${LB}${YELLOW}[!] ${1} skipped as it requires elevated privileges (sudo).${RT}"
}

function pprint {
    local command="$1"
    if [[ -n "$PRETTYP" ]]; then
        # Run the command and strip any color codes (ANSI escape sequences)
        echo -e "${DIM}${WHITE}$(eval $command | sed 's/\x1b\[[0-9;]*m//g') ${RT}"
    else
        eval "$command"
    fi
}

# Wrapper function to handle saving output if --save is present
function RUNwoh {
    # Run with output handling
    local function_name=$1
    if [[ -n "$SOUT" ]]; then
        eval "$function_name | tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' >> $LOGFILE"
    else
        eval "$function_name"
    fi
}

# Script init
set -a

STATIC="$INSTALLDIR/static"
MODULES="$INSTALLDIR/modules"

MODDIR="$INSTALLDIR/modules/functions"
MODHEL="$INSTALLDIR/modules/functions/info"
MODLST="$INSTALLDIR/modules/functions/list"
MODCOR="$INSTALLDIR/modules/functions/core"

STYLE="$INSTALLDIR/modules/style"
HELPER="$INSTALLDIR/modules/helper"
FUNCTIONS="$INSTALLDIR/modules/functions"

source $STATIC/palette/colors
source $STATIC/files/top

source $MODCOR/logic
# source $MODCOR/sys_main
source $MODCOR/sys_check
source $MODLST/installed_packages
source $MODHEL/info_networks
source $MODHEL/info_devices
source $MODHEL/info_gpu
source $MODHEL/info_disks
source $MODHEL/info_sys
source $MODHEL/info_cpu
source $MODHEL/info_kernel
source $MODHEL/info_battery

USAGE="$STATIC/files/man"

set +a

# First check if --save is the only argument
if [[ "$#" -eq 1 && "$1" == "--save" ]]; then
    # Set SOUT to enable saving
    SOUT="| tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' >> $LOGFILE"
    
    # Run default functions (distro_info and system_info_hostnamectl)
    # RUNwoh "general_system_info"
    # RUNwoh "distro_info"
    # RUNwoh "system_info"
    source $MODCOR/sys_main

# Otherwise, handle other cases (including --save combined with other arguments)
else
    for arg in "$@"; do
        if [[ "$arg" == "--pretty" ]]; then
            PRETTYP="true"
        elif [[ "$arg" == "--save" ]]; then
            SOUT="| tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' >> $LOGFILE"
            break
        fi
    done
fi

# Check if no arguments are provided
if [[ $# -eq 0 ]]; then
    # RUNwoh "general_system_info"
    # RUNwoh "distro_info"
    # RUNwoh "system_info"
    system_info
    source $MODCOR/sys_main
fi

# Argument handling ${BLUE}(Updated to handle multiple arguments)
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -net) # EXTERNAL CUSTOM SCRIPT
            python $MODCOR/sys_net.py
            exit 0
            
            ;;        
        -v)
            VLEVEL="$2"
            if [[ "$VLEVEL" =~ ^[1-8]$ ]]; then
                VLEVEL="-v $2"
                RUNwoh "complete_system_info"
            else
                echo -e "${LB}${RED}[E]${RT} The verbosity value must be between 1 and 8. Running default (1)."
                VLEVEL="-v 1"
                RUNwoh "complete_system_info"
            fi
            shift # past argument
            shift # past value
            ;;
        --local)
            INSTALLDIR="."
            shift
            ;;

        -cpu)
            RUNwoh "cpu_info"
            shift
            ;;
        -mem)
            RUNwoh "memory_info"
            RUNwoh "detailed_memory_info"
            shift
            ;;
        -disks)
            RUNwoh "disk_storage_info"
            shift
            ;;
        -devices)
            RUNwoh "pci_devices"
            RUNwoh "usb_devices"
            shift
            ;;
        -networks)
            RUNwoh "network_info"
            RUNwoh "network_connections"
            shift
            ;;
        -kernel)
            RUNwoh "kernel_boot_params"
            RUNwoh "kernel_modules"
            shift
            ;;
        -gpu)
            RUNwoh "graphics_info"
            shift
            ;;
        -battery)
            RUNwoh "battery_info"
            shift
            ;;
        -pkgs)
            RUNwoh "installed_packages"
            shift
            ;;
        -distro)
            RUNwoh "distro_info"
            shift
            ;;
        --all-short|-all)
            #RUNwoh "general_system_info" 
            #RUNwoh "distro_info" 
            #RUNwoh "system_info_hostnamectl"
            RUNwoh "system_info"
            RUNwoh "complete_system_info"
            RUNwoh "kernel_boot_params" 
            RUNwoh "kernel_modules" 
            RUNwoh "battery_info" 
            RUNwoh "cpu_info" 
            RUNwoh "graphics_info" 
            RUNwoh "memory_info" 
            RUNwoh "detailed_memory_info" 
            RUNwoh "disk_storage_info" 
            RUNwoh "pci_devices" 
            RUNwoh "usb_devices" 
            RUNwoh "network_info" 
            RUNwoh "network_connections" 
            RUNwoh "installed_packages" 
            shift
            ;;
        --all-detailed|-ald)
            # RUNwoh "distro_info" 
            # RUNwoh "system_info_hostnamectl"
            # RUNwoh "general_system_info"
            RUNwoh "system_info"
            RUNwoh "complete_system_info"
            RUNwoh "kernel_boot_params"
            RUNwoh "kernel_modules"
            RUNwoh "battery_info"
            RUNwoh "cpu_info"
            RUNwoh "graphics_info"
            RUNwoh "memory_info"
            RUNwoh "detailed_memory_info"
            RUNwoh "disk_storage_info"
            RUNwoh "pci_devices"
            RUNwoh "usb_devices"
            RUNwoh "network_info"
            RUNwoh "network_connections"
            RUNwoh "installed_packages"
            
            shift
            ;;
        -check)
            RUNwoh "system_recommended"
            exit 0
            ;;
        --pretty)
            shift
            ;;
        # --save)
        #     savelog
        #     shift
        #     ;;
        --help|-h|-H)
            PRINT_USAGE=$(cat "$USAGE")
            echo -e "$PRINT_USAGE"
            exit 0
            ;;
        *)
            echo -e "${LB}${RED}[E]${RT} One or more arguments are invalid. Use $0 --help to see all available commands."
            exit 1
            ;;
    esac
done

# Output result based on whether --save was used
if [[ -n "$SOUT" ]]; then
    echo -e "${LB}${GREEN}[âœ”] System information gathered successfully. Check $LOGFILE for details.${RT}"
fi