#!/bin/bash

# Parse arguments before checking the value of LOCAL
# while [ $# -gt 0 ]; do
#   case "$1" in
#       --local)
#           LOCAL="YES"
#           shift 1 # Only shift 1 argument here since --local has no extra argument
#           continue
#           ;;
#   esac
# done

# Now check the value of LOCAL
if [[ "$LOCAL" == "YES" ]]; then
    INSTALLDIR="$(pwd)"
else
    INSTALLDIR="/usr/share/sysdd"
fi

savelog() {
    # Define a log file to store the output
    LOGFILE="$HOME/Desktop/system_$(date +%d%m%y).log"

    # Clear log file if it already exists
    > $LOGFILE

    # Append detailed information about the log created
    echo "[i] File created on $(date '+%A, %B %d, %Y at %H:%M:%S %Z')" | cat - "$LOGFILE" > temp_file && mv temp_file "$LOGFILE"
}

# Variable to store the output modifier if --save is provided
SOUT=""
PRETTYP=""

# Function to print in yellow for sudo commands skipped
function print_sudo_skipped {
    echo -e "${LB}${YELLOW}[!] ${1} skipped as it requires elevated privileges (sudo).${RT}"
}

function pprint {
    local command="$1"
    if [[ -n "$PRETTYP" ]]; then
        # Run the command and strip any color codes (ANSI escape sequences)
        echo -e "${DIM}${WHITE}$(eval $command | sed 's/\x1b\[[0-9;]*m//g') ${RT}"
    else
        eval "$command"
    fi
}

# Wrapper function to handle saving output if --save is present
function LOGRUN {
    # Run with output handling
    local function_name=$1
    if [[ -n "$SOUT" ]]; then
        eval "$function_name | tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' >> $LOGFILE"
    else
        eval "$function_name"
    fi
}

# Script init
set -a

# FOLDERS
DEV="$INSTALLDIR/dev"
LIB="$INSTALLDIR/lib"
MODULES="$LIB/modules"
STATIC="$INSTALLDIR/static"


INCLUDES="$LIB/includes"
VERSION="$LIB/version"

MODCORE="$MODULES/core"
MODINFO="$MODULES/info"

# FILES
source COLORS="$INCLUDES/colors"
source LOGIC="$INCLUDES/logic"
source LOGO="$INCLUDES/top"

NETINFO="$MODCORE/netinfo"
SYSINFO="$MODCORE/sysinfo"
SYSCHECK="$MODCORE/syscheck"

source $MODINFO/battery
source $MODINFO/cpu
source $MODINFO/devices
source $MODINFO/disks
source $MODINFO/gpu
source $MODINFO/kernel
source $MODINFO/memory
source $MODINFO/network
source $MODINFO/packages
source $MODINFO/sys

USAGE="$INCLUDES/man"

set +a

# First check if --save is the only argument
if [[ "$#" -eq 1 && "$1" == "--save" ]]; then
    # Set SOUT to enable saving
    SOUT="| tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' >> $LOGFILE"
    
    # Run default functions (distro_info and system_hostnamectl)
    # LOGRUN "general_system_info"
    # LOGRUN "distro_info"
    # LOGRUN "system_info"
    system_info
    source $SYSINFO

# Otherwise, handle other cases (including --save combined with other arguments)
else
    for arg in "$@"; do
        if [[ "$arg" == "--pretty" ]]; then
            PRETTYP="true"
        elif [[ "$arg" == "--save" ]]; then
            SOUT="| tee /dev/tty | sed 's/\x1b\[[0-9;]*m//g' >> $LOGFILE"
            break
        fi
    done
fi

# Check if no arguments are provided
if [[ $# -eq 0 ]]; then
    # LOGRUN "general_system_info"
    # LOGRUN "distro_info"
    # LOGRUN "system_info"
    system_info
    source $SYSINFO
fi

# Argument handling ${BLUE}(Updated to handle multiple arguments)
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -net) # EXTERNAL CUSTOM SCRIPT
            logo_netsonda
            python $NETINFO
            exit 0
            
            ;;
        -sys) # EXTERNAL CUSTOM SCRIPT
            logo_syssonda
            system_info
            source $SYSINFO
            exit 0
            
            ;;
        -check)
            LOGRUN "system_recommended"
            exit 0
            ;;
        --pretty)
            shift
            ;;
        --save)
            # savelog
            shift
            ;;
        --help|-h|-H)
            PRINT_USAGE=$(cat "$USAGE")
            echo -e "$PRINT_USAGE"
            exit 0
            ;;
        --local)
            INSTALLDIR="."
            shift
            ;;
        -v)
            VLEVEL="$2"
            if [[ "$VLEVEL" =~ ^[1-8]$ ]]; then
                VLEVEL="-v $2"
                LOGRUN "complete_system_info"
            else
                echo -e "${LB}${RED}[E]${RT} The verbosity value must be between 1 and 8. Running default (1)."
                VLEVEL="-v 1"
                LOGRUN "complete_system_info"
            fi
            shift # past argument
            shift # past value
            ;;

        -cpu)
            LOGRUN "cpu_info"
            shift
            ;;
        -mem)
            LOGRUN "memory_info"
            LOGRUN "detailed_memory_info"
            shift
            ;;
        -disks)
            LOGRUN "disk_storage_info"
            shift
            ;;
        -devices)
            LOGRUN "pci_devices"
            LOGRUN "usb_devices"
            shift
            ;;
        -networks)
            LOGRUN "network_info"
            LOGRUN "network_connections"
            shift
            ;;
        -kernel)
            LOGRUN "kernel_boot_params"
            LOGRUN "kernel_modules"
            shift
            ;;
        -gpu)
            LOGRUN "graphics_info"
            shift
            ;;
        -battery)
            LOGRUN "battery_info"
            shift
            ;;
        -pkgs)
            LOGRUN "installed_packages"
            shift
            ;;
        -distro)
            LOGRUN "distro_info"
            shift
            ;;
        --all-short|-all)
            #LOGRUN "general_system_info" 
            #LOGRUN "distro_info" 
            #LOGRUN "system_hostnamectl"
            LOGRUN "system_info"
            LOGRUN "complete_system_info"
            LOGRUN "kernel_boot_params" 
            LOGRUN "kernel_modules" 
            LOGRUN "battery_info" 
            LOGRUN "cpu_info" 
            LOGRUN "graphics_info" 
            LOGRUN "memory_info" 
            LOGRUN "detailed_memory_info" 
            LOGRUN "disk_storage_info" 
            LOGRUN "pci_devices" 
            LOGRUN "usb_devices" 
            LOGRUN "network_info" 
            LOGRUN "network_connections" 
            LOGRUN "installed_packages" 
            shift
            ;;
        --all-detailed|-ald)
            # LOGRUN "distro_info" 
            # LOGRUN "system_hostnamectl"
            # LOGRUN "general_system_info"
            LOGRUN "system_info"
            LOGRUN "complete_system_info"
            LOGRUN "kernel_boot_params"
            LOGRUN "kernel_modules"
            LOGRUN "battery_info"
            LOGRUN "cpu_info"
            LOGRUN "graphics_info"
            LOGRUN "memory_info"
            LOGRUN "detailed_memory_info"
            LOGRUN "disk_storage_info"
            LOGRUN "pci_devices"
            LOGRUN "usb_devices"
            LOGRUN "network_info"
            LOGRUN "network_connections"
            LOGRUN "installed_packages"
            
            shift
            ;;
        *)
            echo -e "${LB}${RED}[E]${RT} One or more arguments are invalid. Use $0 --help to see all available commands."
            exit 1
            ;;
    esac
done

# Output result based on whether --save was used
if [[ -n "$SOUT" ]]; then
    echo -e "${LB}${GREEN}[âœ”] System information gathered successfully. Check $LOGFILE for details.${RT}"
fi